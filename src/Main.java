
/**
 *
 * @author Nabeel Siddiqui
 */
import javax.swing.JOptionPane;
import javax.swing.table.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFileChooser;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
public class Main extends javax.swing.JFrame {
    public MyHashTable mainHT;
    private DefaultTableModel model;
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        setBounds(300,80,800,600);
        this.setResizable(false);
        this.setTitle("EMS");
        rbnFTE.setOpaque(true);
        rbnPTE.setOpaque(true);
        setDefaultCloseOperation(0);
        mainHT = new MyHashTable(10);
        clear_AllEntries();
        rbn_Actions(true);
        tfdTotalRecords.setText("No Record!");
        tfdEmployeeNumber.grabFocus();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeader = new javax.swing.JLabel();
        lblEmployeeNumber = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        tfdEmployeeNumber = new javax.swing.JTextField();
        cbxGender = new javax.swing.JComboBox<>();
        lblFirstName = new javax.swing.JLabel();
        lblWorkLocation = new javax.swing.JLabel();
        cbxWorkLocation = new javax.swing.JComboBox<>();
        tfdFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        lblDeductionRate = new javax.swing.JLabel();
        tfdLastName = new javax.swing.JTextField();
        tfdDeductionRate = new javax.swing.JTextField();
        tfdWeeksPerYear = new javax.swing.JTextField();
        lblWeeksPerYear = new javax.swing.JLabel();
        tfdHoursPerWeek = new javax.swing.JTextField();
        lblHoursPerWeek = new javax.swing.JLabel();
        tfdHourlyWage = new javax.swing.JTextField();
        tfdYearlySalary = new javax.swing.JTextField();
        lblYearlySalary = new javax.swing.JLabel();
        lblHourlyWage = new javax.swing.JLabel();
        rbnPTE = new javax.swing.JRadioButton();
        rbnFTE = new javax.swing.JRadioButton();
        tfdTotalRecords = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        tfdDataFile = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbeEmployeeInfo = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnClearListAll = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        lblBackgroundImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblHeader.setBackground(new java.awt.Color(255, 255, 0));
        lblHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader.setForeground(new java.awt.Color(0, 0, 255));
        lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeader.setText("Employment Management System");
        lblHeader.setToolTipText("");
        lblHeader.setOpaque(true);
        getContentPane().add(lblHeader);
        lblHeader.setBounds(175, 10, 430, 40);

        lblEmployeeNumber.setBackground(new java.awt.Color(255, 255, 0));
        lblEmployeeNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblEmployeeNumber.setForeground(new java.awt.Color(0, 0, 255));
        lblEmployeeNumber.setText("Employee Number");
        lblEmployeeNumber.setOpaque(true);
        getContentPane().add(lblEmployeeNumber);
        lblEmployeeNumber.setBounds(70, 90, 102, 27);

        lblGender.setBackground(new java.awt.Color(255, 255, 0));
        lblGender.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblGender.setForeground(new java.awt.Color(0, 0, 255));
        lblGender.setText("Gender");
        lblGender.setOpaque(true);
        getContentPane().add(lblGender);
        lblGender.setBounds(70, 130, 41, 27);

        tfdEmployeeNumber.setForeground(new java.awt.Color(0, 0, 255));
        tfdEmployeeNumber.setToolTipText("Enter a six digit employee number (e.g. 123456)");
        getContentPane().add(tfdEmployeeNumber);
        tfdEmployeeNumber.setBounds(180, 90, 80, 27);

        cbxGender.setBackground(new java.awt.Color(255, 255, 0));
        cbxGender.setForeground(new java.awt.Color(0, 0, 255));
        cbxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        cbxGender.setToolTipText("Select Gender");
        getContentPane().add(cbxGender);
        cbxGender.setBounds(180, 130, 80, 27);

        lblFirstName.setBackground(new java.awt.Color(255, 255, 0));
        lblFirstName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFirstName.setForeground(new java.awt.Color(0, 0, 255));
        lblFirstName.setText("First Name");
        lblFirstName.setOpaque(true);
        getContentPane().add(lblFirstName);
        lblFirstName.setBounds(270, 90, 60, 27);

        lblWorkLocation.setBackground(new java.awt.Color(255, 255, 0));
        lblWorkLocation.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblWorkLocation.setForeground(new java.awt.Color(0, 0, 255));
        lblWorkLocation.setText("Work Location");
        lblWorkLocation.setToolTipText("");
        lblWorkLocation.setOpaque(true);
        getContentPane().add(lblWorkLocation);
        lblWorkLocation.setBounds(270, 130, 81, 27);

        cbxWorkLocation.setBackground(new java.awt.Color(255, 255, 0));
        cbxWorkLocation.setForeground(new java.awt.Color(0, 0, 255));
        cbxWorkLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mississauga", "Ottawa", "Chicago", "Edmonton", "Victoria", "Toronto", "Quebec City", "Regina", "Winnipeg", "Halifax", "Charlottetown" }));
        cbxWorkLocation.setToolTipText("Select Work Location");
        getContentPane().add(cbxWorkLocation);
        cbxWorkLocation.setBounds(360, 130, 140, 27);

        tfdFirstName.setForeground(new java.awt.Color(0, 0, 255));
        tfdFirstName.setToolTipText("Enter First Name");
        getContentPane().add(tfdFirstName);
        tfdFirstName.setBounds(360, 90, 140, 27);

        lblLastName.setBackground(new java.awt.Color(255, 255, 0));
        lblLastName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblLastName.setForeground(new java.awt.Color(0, 0, 255));
        lblLastName.setText("Last Name");
        lblLastName.setOpaque(true);
        getContentPane().add(lblLastName);
        lblLastName.setBounds(510, 90, 59, 27);

        lblDeductionRate.setBackground(new java.awt.Color(255, 255, 0));
        lblDeductionRate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDeductionRate.setForeground(new java.awt.Color(0, 0, 255));
        lblDeductionRate.setText("Deduction Rate");
        lblDeductionRate.setOpaque(true);
        getContentPane().add(lblDeductionRate);
        lblDeductionRate.setBounds(510, 130, 87, 27);

        tfdLastName.setForeground(new java.awt.Color(0, 0, 255));
        tfdLastName.setToolTipText("Enter Last Name");
        getContentPane().add(tfdLastName);
        tfdLastName.setBounds(610, 90, 100, 27);

        tfdDeductionRate.setForeground(new java.awt.Color(0, 0, 255));
        tfdDeductionRate.setToolTipText("Enter Deduction Rate");
        getContentPane().add(tfdDeductionRate);
        tfdDeductionRate.setBounds(610, 130, 58, 27);

        tfdWeeksPerYear.setForeground(new java.awt.Color(0, 0, 255));
        tfdWeeksPerYear.setToolTipText("Enter Weeks Per Year for Part Time Employee");
        getContentPane().add(tfdWeeksPerYear);
        tfdWeeksPerYear.setBounds(610, 210, 74, 27);

        lblWeeksPerYear.setBackground(new java.awt.Color(255, 255, 0));
        lblWeeksPerYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblWeeksPerYear.setForeground(new java.awt.Color(0, 0, 255));
        lblWeeksPerYear.setText("Weeks Per Year");
        lblWeeksPerYear.setOpaque(true);
        getContentPane().add(lblWeeksPerYear);
        lblWeeksPerYear.setBounds(520, 210, 89, 27);

        tfdHoursPerWeek.setForeground(new java.awt.Color(0, 0, 255));
        tfdHoursPerWeek.setToolTipText("Enter Hours Per Week for Part Time Employee");
        getContentPane().add(tfdHoursPerWeek);
        tfdHoursPerWeek.setBounds(450, 210, 49, 27);

        lblHoursPerWeek.setBackground(new java.awt.Color(255, 255, 0));
        lblHoursPerWeek.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHoursPerWeek.setForeground(new java.awt.Color(0, 0, 255));
        lblHoursPerWeek.setText("Hours Per Week");
        lblHoursPerWeek.setOpaque(true);
        getContentPane().add(lblHoursPerWeek);
        lblHoursPerWeek.setBounds(350, 210, 90, 27);

        tfdHourlyWage.setForeground(new java.awt.Color(0, 0, 255));
        tfdHourlyWage.setToolTipText("Enter Hourly Wage for Part Time Employee");
        getContentPane().add(tfdHourlyWage);
        tfdHourlyWage.setBounds(270, 210, 52, 27);

        tfdYearlySalary.setForeground(new java.awt.Color(0, 0, 255));
        tfdYearlySalary.setToolTipText("Enter Yearly Salary for Full Time Employee");
        getContentPane().add(tfdYearlySalary);
        tfdYearlySalary.setBounds(270, 170, 103, 27);

        lblYearlySalary.setBackground(new java.awt.Color(255, 255, 0));
        lblYearlySalary.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblYearlySalary.setForeground(new java.awt.Color(0, 0, 255));
        lblYearlySalary.setText("Yearly Salary");
        lblYearlySalary.setOpaque(true);
        getContentPane().add(lblYearlySalary);
        lblYearlySalary.setBounds(180, 170, 75, 27);

        lblHourlyWage.setBackground(new java.awt.Color(255, 255, 0));
        lblHourlyWage.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHourlyWage.setForeground(new java.awt.Color(0, 0, 255));
        lblHourlyWage.setText("Hourly Wage");
        lblHourlyWage.setOpaque(true);
        getContentPane().add(lblHourlyWage);
        lblHourlyWage.setBounds(180, 210, 72, 27);

        rbnPTE.setBackground(new java.awt.Color(255, 255, 0));
        rbnPTE.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbnPTE.setForeground(new java.awt.Color(0, 0, 255));
        rbnPTE.setText("PTE");
        rbnPTE.setToolTipText("Select Part Time Employee");
        rbnPTE.setBorderPainted(true);
        rbnPTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnPTEActionPerformed(evt);
            }
        });
        getContentPane().add(rbnPTE);
        rbnPTE.setBounds(120, 210, 45, 23);

        rbnFTE.setBackground(new java.awt.Color(255, 255, 0));
        rbnFTE.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbnFTE.setForeground(new java.awt.Color(0, 0, 255));
        rbnFTE.setSelected(true);
        rbnFTE.setText("FTE");
        rbnFTE.setToolTipText("Select Full Time Employee");
        rbnFTE.setBorderPainted(true);
        rbnFTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnFTEActionPerformed(evt);
            }
        });
        getContentPane().add(rbnFTE);
        rbnFTE.setBounds(120, 170, 45, 23);

        tfdTotalRecords.setEditable(false);
        tfdTotalRecords.setBackground(new java.awt.Color(255, 255, 0));
        tfdTotalRecords.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        tfdTotalRecords.setForeground(new java.awt.Color(0, 0, 255));
        tfdTotalRecords.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfdTotalRecords.setToolTipText("");
        getContentPane().add(tfdTotalRecords);
        tfdTotalRecords.setBounds(70, 480, 100, 27);

        lblStatus.setBackground(new java.awt.Color(255, 255, 0));
        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(0, 0, 255));
        lblStatus.setText("File Status:");
        lblStatus.setOpaque(true);
        getContentPane().add(lblStatus);
        lblStatus.setBounds(180, 480, 70, 27);

        tfdDataFile.setEditable(false);
        tfdDataFile.setBackground(new java.awt.Color(255, 255, 0));
        tfdDataFile.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        tfdDataFile.setForeground(new java.awt.Color(0, 0, 255));
        tfdDataFile.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfdDataFile.setToolTipText("");
        getContentPane().add(tfdDataFile);
        tfdDataFile.setBounds(250, 480, 460, 27);

        jScrollPane1.setToolTipText("");
        jScrollPane1.setAutoscrolls(true);

        tbeEmployeeInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbeEmployeeInfo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbeEmployeeInfo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbeEmployeeInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbeEmployeeInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbeEmployeeInfo);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 330, 640, 140);

        btnAdd.setBackground(new java.awt.Color(255, 255, 0));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(0, 0, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setToolTipText("Add a new Employee");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(70, 250, 105, 30);

        btnExit.setBackground(new java.awt.Color(255, 255, 0));
        btnExit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExit.setForeground(new java.awt.Color(0, 0, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Exit.png"))); // NOI18N
        btnExit.setText("Exit");
        btnExit.setToolTipText("Exit \"EMS\"");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit);
        btnExit.setBounds(290, 290, 105, 30);

        btnClearListAll.setBackground(new java.awt.Color(255, 255, 0));
        btnClearListAll.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnClearListAll.setForeground(new java.awt.Color(0, 0, 255));
        btnClearListAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Clear.png"))); // NOI18N
        btnClearListAll.setText("Clear");
        btnClearListAll.setToolTipText("Clear Entries and List All Employees");
        btnClearListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearListAllActionPerformed(evt);
            }
        });
        getContentPane().add(btnClearListAll);
        btnClearListAll.setBounds(510, 250, 105, 30);

        btnRemove.setBackground(new java.awt.Color(255, 255, 0));
        btnRemove.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(0, 0, 255));
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Remove.png"))); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.setToolTipText("Remove an Employee");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemove);
        btnRemove.setBounds(180, 250, 105, 30);

        btnEdit.setBackground(new java.awt.Color(255, 255, 0));
        btnEdit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(0, 0, 255));
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Edit.png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setToolTipText("Edit/Modify an Employee");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        getContentPane().add(btnEdit);
        btnEdit.setBounds(290, 250, 105, 30);

        btnFind.setBackground(new java.awt.Color(255, 255, 0));
        btnFind.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnFind.setForeground(new java.awt.Color(0, 0, 255));
        btnFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Find.png"))); // NOI18N
        btnFind.setText("Find");
        btnFind.setToolTipText("Find Employee(s)");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });
        getContentPane().add(btnFind);
        btnFind.setBounds(400, 250, 105, 30);

        btnSave.setBackground(new java.awt.Color(255, 255, 0));
        btnSave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSave.setForeground(new java.awt.Color(0, 0, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Save.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setToolTipText("Save All Employees to a file");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave);
        btnSave.setBounds(70, 290, 105, 30);

        btnLoad.setBackground(new java.awt.Color(255, 255, 0));
        btnLoad.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLoad.setForeground(new java.awt.Color(0, 0, 255));
        btnLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Load.png"))); // NOI18N
        btnLoad.setText("Load");
        btnLoad.setToolTipText("Load All Employees from a file");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        getContentPane().add(btnLoad);
        btnLoad.setBounds(180, 290, 105, 30);

        lblBackgroundImage.setBackground(new java.awt.Color(255, 255, 0));
        lblBackgroundImage.setForeground(new java.awt.Color(0, 0, 153));
        lblBackgroundImage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBackgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/EMSMain.png"))); // NOI18N
        lblBackgroundImage.setToolTipText("");
        lblBackgroundImage.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblBackgroundImage.setAlignmentY(0.0F);
        lblBackgroundImage.setFocusable(false);
        lblBackgroundImage.setName(""); // NOI18N
        getContentPane().add(lblBackgroundImage);
        lblBackgroundImage.setBounds(0, 0, 780, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbnPTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnPTEActionPerformed
        // TODO add your handling code here:
        if (rbnPTE.isSelected()) {
            rbn_Actions(false);
        }
    }//GEN-LAST:event_rbnPTEActionPerformed

    private void rbnFTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnFTEActionPerformed
        // TODO add your handling code here:
        if (rbnFTE.isSelected()) {
            rbn_Actions(true);
        }
    }//GEN-LAST:event_rbnFTEActionPerformed

    private void tbeEmployeeInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbeEmployeeInfoMouseClicked
        // TODO add your handling code here:
        if (tbeEmployeeInfo.getRowCount()==0)
            return;
        if (tbeEmployeeInfo.getSelectedRowCount()==0)
            return;
        if (tbeEmployeeInfo.getSelectedRowCount()>1)
            return;
        DefaultTableModel model = (DefaultTableModel) tbeEmployeeInfo.getModel();
        int intRowOfTable =  tbeEmployeeInfo.getSelectedRow();
        clear_AllEntries();
        //int intEmpNum = Integer.parseInt(tbeEmployeeInfo.getValueAt(intRowOfTable,1).toString());
        tfdEmployeeNumber.setText(model.getValueAt(intRowOfTable, 1).toString());
        tfdFirstName.setText(model.getValueAt(intRowOfTable, 2).toString());
        tfdLastName.setText(model.getValueAt(intRowOfTable, 3).toString());
        cbxGender.setSelectedItem(model.getValueAt(intRowOfTable, 4));
        cbxWorkLocation.setSelectedItem(model.getValueAt(intRowOfTable, 5));
        tfdDeductionRate.setText(model.getValueAt(intRowOfTable, 6).toString());
        if (model.getValueAt(intRowOfTable, 0).toString()=="Full Time") {
            rbn_Actions(true);
            tfdYearlySalary.setText(model.getValueAt(intRowOfTable, 7).toString());
        }
        if (model.getValueAt(intRowOfTable, 0).toString()=="Part Time") {
            rbn_Actions(false);
            tfdHourlyWage.setText(model.getValueAt(intRowOfTable, 9).toString());
            tfdHoursPerWeek.setText(model.getValueAt(intRowOfTable, 10).toString());
            tfdWeeksPerYear.setText(model.getValueAt(intRowOfTable, 11).toString());
        }
        tfdEmployeeNumber.grabFocus();
    }//GEN-LAST:event_tbeEmployeeInfoMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if (isInvalid_AnyEntry()==true)
            return;

        int theEmpNum = Integer.parseInt(tfdEmployeeNumber.getText());
        if (existEmployeeNumber(theEmpNum)==true) {
            JOptionPane.showMessageDialog(this, "EMS cannot have duplicate Employee Numbers! EMS cannot Add/Insert the given info of the Employee!", "EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
               
        String theFirstName = tfdFirstName.getText().strip();
        String theLastName = tfdLastName.getText().strip();
        int theGender = cbxGender.getSelectedIndex();
        int theWorkLocation = cbxWorkLocation.getSelectedIndex();
        double theDeductionRate = Double.parseDouble(tfdDeductionRate.getText());

        if (rbnFTE.isSelected()) {
            double theYearlySalary = Double.parseDouble(tfdYearlySalary.getText());
            FTE theFTE = new FTE(theEmpNum, theFirstName, theLastName, theGender, theWorkLocation, theDeductionRate, theYearlySalary);
            mainHT.addEmployee(theFTE);
        }
        else if (rbnPTE.isSelected()) {
            double theHourlyWage = Double.parseDouble(tfdHourlyWage.getText());
            double theHoursPerWeek = Double.parseDouble(tfdHoursPerWeek.getText());
            double theWeeksPerYear = Double.parseDouble(tfdWeeksPerYear.getText());
            PTE thePTE = new PTE(theEmpNum, theFirstName, theLastName, theGender, theWorkLocation, theDeductionRate, theHourlyWage, theHoursPerWeek, theWeeksPerYear);
            mainHT.addEmployee(thePTE);
        }

        displayTable();
        clear_AllEntries();
        rbn_Actions(true);
        JOptionPane.showMessageDialog(this,"An employee info has been added!","EMS",JOptionPane.OK_OPTION+JOptionPane.INFORMATION_MESSAGE);
        tfdEmployeeNumber.grabFocus();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this,"Are you sure, you want to Exit the application?","EMS",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnClearListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearListAllActionPerformed
        // TODO add your handling code here:
        clear_AllEntries();
        rbn_Actions(true);
        JOptionPane.showMessageDialog(this, "All above Entries have been cleared and Selections have been set to default!", "EMS",JOptionPane.INFORMATION_MESSAGE);
        tfdEmployeeNumber.grabFocus();
    }//GEN-LAST:event_btnClearListAllActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        if (tbeEmployeeInfo.getRowCount()==0) {
            JOptionPane.showMessageDialog(this, "There is no row in the table to Edit/Modify info of the Employee!", "EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tbeEmployeeInfo.getSelectedRowCount()==0) {
            JOptionPane.showMessageDialog(this,"No row has been selected! Please select a row in the table to Edit/Modify info of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if (tbeEmployeeInfo.getSelectedRowCount()>1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in the table to Delete/Remove info of the Employee!", "EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        int intRowOfTable =  tbeEmployeeInfo.getSelectedRow();
        if (intRowOfTable<0) {
            JOptionPane.showMessageDialog(this,"No row has been selected! Please select a row to Delete/Remove info of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (JOptionPane.showConfirmDialog(this,"Are you sure, you want to Delete/Remove info of the Employee!","EMS",JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION)
            return;
        int intEmpNum = Integer.parseInt(tbeEmployeeInfo.getValueAt(intRowOfTable,1).toString());
        EmployeeInfo removedEmployee = mainHT.removeEmployee(intEmpNum);
        if (removedEmployee == null) {
            JOptionPane.showMessageDialog(this,"Employee number of the Hash Table and Table of NetBeans do not match!","EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        model.removeRow(intRowOfTable);

        clear_AllEntries();
        rbn_Actions(true);
        JOptionPane.showMessageDialog(this,"Info of an employee having Employee Number = " + Integer.toString(removedEmployee.getEmpNum()) + " has been deleted/removed!","EMS",JOptionPane.OK_OPTION+JOptionPane.INFORMATION_MESSAGE);
        tfdEmployeeNumber.grabFocus();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
         // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbeEmployeeInfo.getModel();
        if (tbeEmployeeInfo.getRowCount()==0) {
            JOptionPane.showMessageDialog(this, "There is no row in the table to Edit/Modify info of the Employee!", "EMS",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (tbeEmployeeInfo.getSelectedRowCount()==0) {
            JOptionPane.showMessageDialog(this,"No row has been selected! Please select a row in the table to Edit/Modify info of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if (tbeEmployeeInfo.getSelectedRowCount()>1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in the table to Edit/Modify info of the Employee!", "EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (isInvalid_AnyEntry()==true) {
            return;
        }
        //Beginning: Remove Employee Info
        int intRowOfTable =  tbeEmployeeInfo.getSelectedRow();
        if (!tfdEmployeeNumber.getText().equalsIgnoreCase(tbeEmployeeInfo.getValueAt(intRowOfTable,1).toString())) {
            JOptionPane.showMessageDialog(this, "Employee Numbers of the selected row of the table and text field on the form are different! So, the row cannot be Edited/Modified!", "EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        int intEmpNum = Integer.parseInt(tbeEmployeeInfo.getValueAt(intRowOfTable,1).toString());
        EmployeeInfo removedEmployee = mainHT.removeEmployee(intEmpNum);
        if (removedEmployee == null) {
            JOptionPane.showMessageDialog(this,"Employee number of the Hash Table and Table of NetBeans do not match!","EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        model.removeRow(intRowOfTable);
        //Ending: Remove Employee Info

        //Beginning: Add Employee Info
        int theEmpNum = Integer.parseInt(tfdEmployeeNumber.getText());
        String theFirstName = tfdFirstName.getText().strip();
        String theLastName = tfdLastName.getText().strip();
        int theGender = cbxGender.getSelectedIndex();
        int theWorkLocation = cbxWorkLocation.getSelectedIndex();
        double theDeductionRate = Double.parseDouble(tfdDeductionRate.getText());

        if (rbnFTE.isSelected()) {
            double theYearlySalary = Double.parseDouble(tfdYearlySalary.getText());
            FTE theFTE = new FTE(theEmpNum, theFirstName, theLastName, theGender, theWorkLocation, theDeductionRate, theYearlySalary);
            mainHT.addEmployee(theFTE);
        }
        else if (rbnPTE.isSelected()) {
            double theHourlyWage = Double.parseDouble(tfdHourlyWage.getText());
            double theHoursPerWeek = Double.parseDouble(tfdHoursPerWeek.getText());
            double theWeeksPerYear = Double.parseDouble(tfdWeeksPerYear.getText());
            PTE thePTE = new PTE(theEmpNum, theFirstName, theLastName, theGender, theWorkLocation, theDeductionRate, theHourlyWage, theHoursPerWeek, theWeeksPerYear);
            mainHT.addEmployee(thePTE);
        }

        displayTable();
        clear_AllEntries();
        rbn_Actions(true);
        JOptionPane.showMessageDialog(this,"Employee Info has been successfully edited!","EMS",JOptionPane.OK_OPTION+JOptionPane.INFORMATION_MESSAGE);
        tfdEmployeeNumber.grabFocus();
        //Ending: Add Employee Info
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbeEmployeeInfo.getModel();
        if (tbeEmployeeInfo.getRowCount()==0) {
            JOptionPane.showMessageDialog(this, "There is no row in the table to search info of the Employee!", "EMS",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String txtAnyField;

        try {
            txtAnyField = tfdEmployeeNumber.getText();
            if (txtAnyField.isEmpty()) {
                JOptionPane.showMessageDialog(this,"For searching, please enter a valid positive integer (upto 6 digits) for Employment Number of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return;
            }
            else if (Integer.parseInt(txtAnyField)<=0 || Integer.parseInt(txtAnyField)>999999) {
                JOptionPane.showMessageDialog(this,"For searching, please enter a valid positive integer (upto 6 digits) for Employment Number of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(this,"For searching, please enter a valid positive integer (upto 6 digits) for Employment Number of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }
        int intEmpNum = Integer.parseInt(tfdEmployeeNumber.getText());
        EmployeeInfo theEmp = mainHT.findEmployee(intEmpNum);
        if (theEmp == null) {
            JOptionPane.showMessageDialog(this,"Employee number could not be find!","EMS",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (theEmp instanceof FTE) {
            FTE theFTE = (FTE) theEmp;
            clear_AllEntries();
            rbn_Actions(true);
            tfdEmployeeNumber.setText(theEmp.getEmpNum()+"");
            tfdFirstName.setText(theEmp.getFirstName());
            tfdLastName.setText(theEmp.getLastName());
            cbxGender.setSelectedItem(theEmp.getGender());
            cbxWorkLocation.setSelectedItem(theEmp.getWorkLocation());
            tfdDeductionRate.setText(theEmp.getDeductionRate()+"");
            tfdYearlySalary.setText(theFTE.getYearlySalary()+"");
            JOptionPane.showMessageDialog(this,"Employee Info has been successfully searched!","EMS",JOptionPane.OK_OPTION+JOptionPane.INFORMATION_MESSAGE);
            tfdEmployeeNumber.grabFocus();
            return;
        }
        if (theEmp instanceof PTE) {
            PTE thePTE = (PTE) theEmp;
            clear_AllEntries();
            rbn_Actions(false);
            tfdEmployeeNumber.setText(theEmp.getEmpNum()+"");
            tfdFirstName.setText(theEmp.getFirstName());
            tfdLastName.setText(theEmp.getLastName());
            cbxGender.setSelectedItem(theEmp.getGender());
            cbxWorkLocation.setSelectedItem(theEmp.getWorkLocation()+"");
            tfdDeductionRate.setText(theEmp.getDeductionRate()+"");
            tfdHourlyWage.setText(thePTE.getHourlyWage()+"");
            tfdHoursPerWeek.setText(thePTE.getHoursPerWeek()+"");
            tfdWeeksPerYear.setText(thePTE.getWeeksPerYear()+"");
            JOptionPane.showMessageDialog(this,"Employee Info has been successfully searched!","EMS",JOptionPane.OK_OPTION+JOptionPane.INFORMATION_MESSAGE);
            tfdEmployeeNumber.grabFocus();
            return;
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        clear_AllEntries();
        rbn_Actions(true);        
        DefaultTableModel model = (DefaultTableModel) tbeEmployeeInfo.getModel();
        if (tbeEmployeeInfo.getRowCount()==0) {
            JOptionPane.showMessageDialog(this, "There is no row in the table to save info of the Employees!", "EMS",JOptionPane.INFORMATION_MESSAGE);
            return;
        }        
        Vector<Vector> tableData = model.getDataVector();
        String strFilePath;
        try {
            JFileChooser fcrFileChooser = new JFileChooser();
            fcrFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int option = fcrFileChooser.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION){
                strFilePath=fcrFileChooser.getSelectedFile().getAbsolutePath();
                LocalDateTime curDateTimeObj = LocalDateTime.now();
                DateTimeFormatter dateFormatObj = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
                String strFileName = curDateTimeObj.format(dateFormatObj);
                strFilePath = strFilePath+"\\"+strFileName+".bin";
                FileOutputStream binFile1 = new FileOutputStream(strFilePath);
                ObjectOutputStream output = new ObjectOutputStream(binFile1);
                output.writeObject(tableData);
                output.close();
                binFile1.close();
                tfdDataFile.setText("File saved to "+strFilePath);
                tfdEmployeeNumber.grabFocus();
                JOptionPane.showMessageDialog(this,"File has been successfully saved!","EMS",JOptionPane.OK_OPTION+JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch(Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        try {
            clear_AllEntries();
            rbn_Actions(true);
            mainHT = null;
            mainHT = new MyHashTable(10);
            model = null;
            JFileChooser fcrFileChooser = new JFileChooser();
            fcrFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fcrFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Binary Files (*.bin)","bin"));
            fcrFileChooser.setAcceptAllFileFilterUsed(false);
            int option = fcrFileChooser.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                String strSelectedFileName = fcrFileChooser.getSelectedFile().toString();
                FileInputStream fileInStream = new FileInputStream(strSelectedFileName);
                ObjectInputStream objInStream = new ObjectInputStream(fileInStream);
                Vector<Vector> tableData = (Vector<Vector>)objInStream.readObject();
                fileInStream.close();
                objInStream.close();
                int intEmpNum, intGenderNum, intWorkLocationNum;
                double dblDeductionRate, dblYearlySalary, dblHourlyWage, dblHoursPerWeek, dblWeeksPerYear;
                String strEmpStatus, strFirstName, strLastName;
                for (int intCounter = 0; intCounter < tableData.size(); intCounter++) {
                    Vector row = tableData.get(intCounter);
                    strEmpStatus = row.get(0).toString();
                    intEmpNum = Integer.parseInt(row.get(1).toString());
                    strFirstName = row.get(2).toString();
                    strLastName = row.get(3).toString();
                    intGenderNum = getTheGenderNumber(row.get(4).toString());
                    intWorkLocationNum = getWorkLocationNumber(row.get(5).toString());
                    dblDeductionRate = Double.parseDouble(row.get(6).toString());
                    if (strEmpStatus.equals("Full Time")) {
                        dblYearlySalary = Double.parseDouble(row.get(7).toString());
                        FTE theFTE = new FTE(intEmpNum, strFirstName,strLastName,intGenderNum,intWorkLocationNum, dblDeductionRate, dblYearlySalary);
                        mainHT.addEmployee(theFTE);
                    }
                    if (strEmpStatus.equals("Part Time")) {
                        dblHourlyWage = Double.parseDouble(row.get(9).toString());
                        dblHoursPerWeek = Double.parseDouble(row.get(10).toString());
                        dblWeeksPerYear = Double.parseDouble(row.get(11).toString());
                        PTE thePTE = new PTE(intEmpNum,strFirstName,strLastName,intGenderNum,intWorkLocationNum,dblDeductionRate,dblHourlyWage, dblHoursPerWeek, dblWeeksPerYear);
                        mainHT.addEmployee(thePTE);
                    }
                    
                    displayTable();
                }
                tfdDataFile.setText("File loaded from "+strSelectedFileName);
                tfdEmployeeNumber.grabFocus();
                JOptionPane.showMessageDialog(this,"File has been successfully loaded!","EMS",JOptionPane.OK_OPTION+JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"Invalid loading file! "+ex.getMessage()+"","EMS",JOptionPane.ERROR_MESSAGE);
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    public int getTheGenderNumber(String paraText) {
    int intGender=-1;
    if (paraText.equals("Male"))
            intGender = 0;
    else if (paraText.equals("Female"))
            intGender = 1;
    else if (paraText.equals("Other"))
            intGender = 2;
    return intGender;
}

public int getWorkLocationNumber(String paraText) {
    int intWorkLocation=-1;
    if (paraText.equals("Male"))
            intWorkLocation = 0;
    else if (paraText.equals("Mississauga"))
            intWorkLocation = 1;
    else if (paraText.equals("Ottawa"))
            intWorkLocation = 2;
    else if (paraText.equals("Chicago"))
            intWorkLocation = 3;
    else if (paraText.equals("Edmonton"))
            intWorkLocation = 4;
    else if (paraText.equals("Victoria"))
            intWorkLocation = 5;
    else if (paraText.equals("Toronto"))
            intWorkLocation = 6;
    else if (paraText.equals("Quebec City"))
            intWorkLocation = 7;
    else if (paraText.equals("Regina"))
            intWorkLocation = 8;
    else if (paraText.equals("Winnipeg"))
            intWorkLocation = 9;
    else if (paraText.equals("Halifax"))
            intWorkLocation = 10;
    else if (paraText.equals("Charlottetown"))
            intWorkLocation = 11;
    return intWorkLocation;
}    

    public void rbn_Actions(boolean blnValue) {
        lblYearlySalary.setVisible(blnValue);
        tfdYearlySalary.setText("");
        tfdYearlySalary.setVisible(blnValue);
        lblHourlyWage.setVisible(!blnValue);
        tfdHourlyWage.setText("");
        tfdHourlyWage.setVisible(!blnValue);
        lblHoursPerWeek.setVisible(!blnValue);
        tfdHoursPerWeek.setText("");
        tfdHoursPerWeek.setVisible(!blnValue);
        lblWeeksPerYear.setVisible(!blnValue);
        tfdWeeksPerYear.setText("");
        tfdWeeksPerYear.setVisible(!blnValue);
        rbnFTE.setSelected(blnValue);
        rbnPTE.setSelected(!blnValue);       
    }
    
    public void clear_AllEntries() {
        tfdEmployeeNumber.setText("");
        tfdFirstName.setText("");
        tfdLastName.setText("");
        cbxGender.setSelectedIndex(0);
        cbxWorkLocation.setSelectedIndex(0);
        tfdDeductionRate.setText("");
    }
    
    public boolean existEmployeeNumber(int para_intEmpNum) {
        EmployeeInfo givenEmployee = mainHT.findEmployee(para_intEmpNum);
        if (givenEmployee!=null) {
            return true;
        }
        else {
            return false;
        }
    }
    
    public boolean isInvalid_AnyEntry() {
        String txtAnyField;
        
        try {
            txtAnyField = tfdEmployeeNumber.getText();
            if (txtAnyField.isEmpty()) {
                JOptionPane.showMessageDialog(this,"Please enter a valid 6-digit positive integer for Employment Number of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }
            else if (Integer.parseInt(txtAnyField)<100000 || Integer.parseInt(txtAnyField)>999999) {
                JOptionPane.showMessageDialog(this,"Please enter a valid 6-digit positive integer for Employment Number of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(this,"Please enter a valid 6-digit positive integer for Employment Number of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
            return true;
        }
        
        tfdFirstName.setText(tfdFirstName.getText().strip());
        txtAnyField = tfdFirstName.getText();
        if (txtAnyField.isEmpty()) {
           JOptionPane.showMessageDialog(this,"Please enter First Name of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
           return true;
        }
 
        txtAnyField = tfdLastName.getText();
        if (txtAnyField.isEmpty()) {
           JOptionPane.showMessageDialog(this,"Please enter Last Name of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
           return true;
        }

        try {
            txtAnyField = tfdDeductionRate.getText();
            if (txtAnyField.isEmpty()) {
                JOptionPane.showMessageDialog(this,"Please enter Deduction Rate of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }
            else if (Double.parseDouble(txtAnyField)<0.00) {
                JOptionPane.showMessageDialog(this,"Please enter a valid positive number for Deduction Rate of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }
            else if (Double.parseDouble(txtAnyField)>1.00) {
                JOptionPane.showMessageDialog(this,"Please enter a valid positive number less than '1.00' for Deduction Rate of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true; 
            }
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(this,"Please enter a valid number for Deduction Rate of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
            return true;
        }

        if (rbnFTE.isSelected()) {
            try {
                txtAnyField = tfdYearlySalary.getText();
                if (txtAnyField.isEmpty()) {
                    JOptionPane.showMessageDialog(this,"Please enter Yearly Salary of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
                else if (Double.parseDouble(txtAnyField)<=0) {
                    JOptionPane.showMessageDialog(this,"Please enter a valid positive number for Yearly Salary of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
            }
            catch(Exception ex) {
                JOptionPane.showMessageDialog(this,"Please enter a valid number for Yearly Salary of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }
        }
        
        if (rbnPTE.isSelected()) {
            try {
                txtAnyField = tfdHourlyWage.getText();
                if (txtAnyField.isEmpty()) {
                    JOptionPane.showMessageDialog(this,"Please enter Hourly Wage of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
                else if (Double.parseDouble(txtAnyField)<=0) {
                    JOptionPane.showMessageDialog(this,"Please enter a valid positive number for Hourly Wage of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
            }
            catch(Exception ex) {
                JOptionPane.showMessageDialog(this,"Please enter a valid number for Hourly Wage of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }            
        }
 
        if (rbnPTE.isSelected()) {
            try {
                txtAnyField = tfdHoursPerWeek.getText();
                if (txtAnyField.isEmpty()) {
                    JOptionPane.showMessageDialog(this,"Please enter Hours Per Week of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
                else if (Double.parseDouble(txtAnyField)<=0 || Double.parseDouble(txtAnyField)>168.00) {
                    JOptionPane.showMessageDialog(this,"Please enter a valid positive number for Hours Per Week of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
            }
            catch(Exception ex) {
                JOptionPane.showMessageDialog(this,"Please enter a valid number for Hours Per Week of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }            
        }
 
        if (rbnPTE.isSelected()) {
            try {
                txtAnyField = tfdWeeksPerYear.getText();
                if (txtAnyField.isEmpty()) {
                    JOptionPane.showMessageDialog(this,"Please enter Weeks Per Year of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
                else if (Double.parseDouble(txtAnyField)<=0 || Double.parseDouble(txtAnyField)>52.30) {
                    JOptionPane.showMessageDialog(this,"Please enter a valid positive number for Weeks Per Year of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
            }
            catch(Exception ex) {
                JOptionPane.showMessageDialog(this,"Please enter a valid number for Weeks Per Year of the Employee!","EMS",JOptionPane.ERROR_MESSAGE);
                return true;
            }            
        }
        
        return false;
    }

    public void displayTable() {                                         
        // TODO add your handling code here:
        int numInHT = mainHT.getNumInHashTable();
        model = new DefaultTableModel(new Object[] {"Status",
                                                    "Emp. Num.",
                                                    "First Name",
                                                    "Last Name",
                                                    "Gender",
                                                    "Work Location",
                                                    "Ded. Rate",
                                                    "FTE Annual Gross Income",
                                                    "FTE Annual Net Income",
                                                    "Hourly Wage",
                                                    "Hours Per Week",
                                                    "Weeks Per Year",
                                                    "PTE Annual Gross Income",
                                                    "PTE Annual Net Income"},
                                                    numInHT);
        tbeEmployeeInfo.setModel(model);
        tbeEmployeeInfo.setAutoCreateColumnsFromModel(true);

        //TableColumnModel columnModel = tbeEmployeeInfo.getColumnModel();
        //columnModel.getColumn(0).setPreferredWidth(200);
        //scrollPane1 = new JScrollPane();
        //jScrollPane1.setViewportView(tbeEmployeeInfo);
        tbeEmployeeInfo.setAutoResizeMode(tbeEmployeeInfo.AUTO_RESIZE_OFF);
        tbeEmployeeInfo.getColumnModel().getColumn(0).setPreferredWidth(70);
        tbeEmployeeInfo.getColumnModel().getColumn(1).setPreferredWidth(80);
        tbeEmployeeInfo.getColumnModel().getColumn(2).setPreferredWidth(80);
        tbeEmployeeInfo.getColumnModel().getColumn(3).setPreferredWidth(80);
        tbeEmployeeInfo.getColumnModel().getColumn(4).setPreferredWidth(70);
        tbeEmployeeInfo.getColumnModel().getColumn(5).setPreferredWidth(90);
        tbeEmployeeInfo.getColumnModel().getColumn(6).setPreferredWidth(70);
        tbeEmployeeInfo.getColumnModel().getColumn(7).setPreferredWidth(160);
        tbeEmployeeInfo.getColumnModel().getColumn(8).setPreferredWidth(140);
        tbeEmployeeInfo.getColumnModel().getColumn(9).setPreferredWidth(80);
        tbeEmployeeInfo.getColumnModel().getColumn(10).setPreferredWidth(100);
        tbeEmployeeInfo.getColumnModel().getColumn(11).setPreferredWidth(110);
        tbeEmployeeInfo.getColumnModel().getColumn(12).setPreferredWidth(160);
        tbeEmployeeInfo.getColumnModel().getColumn(13).setPreferredWidth(140);

        int empCounter = -1; // Row position in table for the employee
        if (numInHT>1)
            tfdTotalRecords.setText(Integer.toString(numInHT) + " Records!");
        else if (numInHT>0)
            tfdTotalRecords.setText(Integer.toString(numInHT) + " Record!");
        else
            tfdTotalRecords.setText("No Record!");
        if (numInHT > 0) {
            for (int i = 0; i < mainHT.buckets.length; i++) {
                for (int j = 0; j < mainHT.buckets[i].size(); j++) {
                    
                    EmployeeInfo theEmp = mainHT.buckets[i].get(j);
                    
                    empCounter++;

                    if (theEmp instanceof FTE) {
                        FTE theFTE = (FTE) theEmp;
                        model.setValueAt("Full Time", empCounter, 0);
                        model.setValueAt(theEmp.getEmpNum(), empCounter, 1);
                        model.setValueAt(theEmp.getFirstName(), empCounter, 2);
                        model.setValueAt(theEmp.getLastName(), empCounter, 3);
                        model.setValueAt(theEmp.getGender(), empCounter, 4);
                        model.setValueAt(theEmp.getWorkLocation(), empCounter, 5);
                        model.setValueAt(theEmp.getDeductionRate(), empCounter, 6);
                        model.setValueAt(theFTE.getYearlySalary(), empCounter, 7);
                        model.setValueAt(String.format("%,.2f",theFTE.calcAnnualNetIncome()), empCounter, 8);
                        model.setValueAt(null, empCounter, 9);
                        model.setValueAt(null, empCounter, 10);
                        model.setValueAt(null, empCounter, 11);
                        model.setValueAt(null, empCounter, 12);
                        model.setValueAt(null, empCounter, 13);
                    }
                    
                    if (theEmp instanceof PTE) {
                        PTE thePTE = (PTE) theEmp;
                        model.setValueAt("Part Time", empCounter, 0);
                        model.setValueAt(theEmp.getEmpNum(), empCounter, 1);
                        model.setValueAt(theEmp.getFirstName(), empCounter, 2);
                        model.setValueAt(theEmp.getLastName(), empCounter, 3);
                        model.setValueAt(theEmp.getGender(), empCounter, 4);
                        model.setValueAt(theEmp.getWorkLocation(), empCounter, 5);
                        model.setValueAt(theEmp.getDeductionRate(), empCounter, 6);
                        model.setValueAt(null, empCounter, 7);
                        model.setValueAt(null, empCounter, 8);
                        model.setValueAt(String.format("%,.2f",thePTE.getHourlyWage()), empCounter, 9);
                        model.setValueAt(thePTE.getHoursPerWeek(), empCounter, 10);
                        model.setValueAt(thePTE.getWeeksPerYear(), empCounter, 11);
                        model.setValueAt(String.format("%,.2f",thePTE.calcAnnualGrossIncome()), empCounter, 12);
                        model.setValueAt(String.format("%,.2f",thePTE.calcAnnualNetIncome()), empCounter, 13);
                   }
                }
            }           
        }
        else {
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            SplashScreen ssr = new SplashScreen();
            ssr.setVisible(true);
            for(int intBarValue = 0; intBarValue <=100; intBarValue++) {
                Thread.sleep(50);
                ssr.lblPBValue.setText(Integer.toString(intBarValue)+"%");
                ssr.pbrSplashScreen.setValue(intBarValue);
            }
            ssr.setVisible(false);
        }
        catch (Exception e) {
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClearListAll;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbxGender;
    private javax.swing.JComboBox<String> cbxWorkLocation;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackgroundImage;
    private javax.swing.JLabel lblDeductionRate;
    private javax.swing.JLabel lblEmployeeNumber;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblHourlyWage;
    private javax.swing.JLabel lblHoursPerWeek;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblWeeksPerYear;
    private javax.swing.JLabel lblWorkLocation;
    private javax.swing.JLabel lblYearlySalary;
    private javax.swing.JRadioButton rbnFTE;
    private javax.swing.JRadioButton rbnPTE;
    private javax.swing.JTable tbeEmployeeInfo;
    private javax.swing.JTextField tfdDataFile;
    private javax.swing.JTextField tfdDeductionRate;
    private javax.swing.JTextField tfdEmployeeNumber;
    private javax.swing.JTextField tfdFirstName;
    private javax.swing.JTextField tfdHourlyWage;
    private javax.swing.JTextField tfdHoursPerWeek;
    private javax.swing.JTextField tfdLastName;
    private javax.swing.JTextField tfdTotalRecords;
    private javax.swing.JTextField tfdWeeksPerYear;
    private javax.swing.JTextField tfdYearlySalary;
    // End of variables declaration//GEN-END:variables
}
